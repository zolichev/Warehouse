Спасибо за выполненное задание, в целом фидбек:

 

·         Код написал «с иголочки».

·         Задача содержит подвох с нотификациями - надо было спросить как их реализовать, а не делать рест апи.

·         Код избыточен, это не очень хорошо, когда этого не надо.

 

Детальный фдбек по заданию ниже:

1) - желательно было сделать сервер асинхронным

2) +- некоторые методы хочется отнести к другим, специализированным, сервисам (прим: Keeper::CheckExpires, Keeper::NotifyTaked). Если первый пример по логике можно оставить, то нотификация просится в сервис нотификации.
В принципе они и безболезненно удаляются
.ForEach(NotifyExpired); -> .ForEach(_tracker.WareExpired);


3) ? - про иерархию StoringNotification-Notification-NotificationValue не понятен замысел.


4) ? - наверно стоило более явно выделить DTO объекты. Он присутствует (Ware-WareValue), но не отделён от объектной модели.


5) - INotificationRepository даёт публичный доступ к коллекции Notifications и ClientRepository, хотя параллельно есть методы Add/delete/update. Эти коллекции там вобще не нужны, когда есть прямой доступ к контексту БД


6) + - в public class NotificationRepository : INotificationRepository
private bool Exists(int id) => _db.Notifications.Count(e => e.Id == id) > 0;
стоит заменить на
private bool Exists(int id) => _db.Notifications.Any(e => e.Id == id);
(а можно вобще удалить, метод не используется)


7) - проверки на срок годности при каждом запросе к сервису (в Keeper). В постановке этого нет, и если это небыло оговорено в доп.вопросах, то это косяк - ибо лишняя нагрузка идёт прицепом к каждому запросу.


8) - логирование и обработку исключений стоило добавить. Сейчас обилие LINQ может приводить к неговорящим ничего исключениям.

 


Рекомендации по выполненному заданию:

9) - проект труден для понимания, избыточность слоёв (прим: keeper и service можно объеденить)

10) - наверно стоит иначе организовать группировки в проекте. Если мы хотим отделять представление от реализации, то надо интерфейсы хранить отдельно от реализаций. Но это не минус, скорее просто совет.

11) - нотификация задумана как сообщения в интерфейсе, тоесть просто API под новый тип объектов. Мы ожидали что будет сервис по немедленной отправке сообщений.

